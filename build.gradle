/*
 * This build file was auto generated by running the Gradle 'init' task
 * by 'yatanokarasu' at '14/10/11 18:33' with Gradle 1.12
 *
 * This generated file contains a sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at http://gradle.org/docs/1.12/userguide/tutorial_java_projects.html
 */

// Apply the java plugin to add support for Java
apply plugin: 'application'
apply plugin: 'java'

// Software Development plugins
//apply plugin: 'checkstyle'
apply plugin: 'eclipse'
apply plugin: 'findbugs'
apply plugin: 'jacoco'
apply plugin: 'pmd'
apply plugin: 'project-report'

apply plugin: 'ca.coglinc.javacc'


ext {
    
    defaultEncoding         = 'UTF-8'
    
    javaccGeneratedDir      = 'src/main/generated'
    buildDir                = 'target'
    targetMain              = "${buildDir}/classes"
    targetTest              = "${buildDir}/test-classes"
    
    artifactId              = 'javacc-test'
    classifier              = 'sample'
    group                   = 'org.ravens.jaxc'
    version                 = '1.0.0-SNAPSHOT'
    
    sourceJavaVersion       = '1.7'
    targetJavaVersion       = '1.7'

    junitVersion            = '4.11'
    slf4jVersion            = '1.7.7'
    gradleWrapperVersion    = '2.1'
    
}


/*
 * Common properties for this project
 */

// project properties
description         = "JAXC is Java-based eXtensible Compiler."
buildDir            = ext.buildDir
group               = ext.group
version             = ext.version

// java plugin properties
sourceCompatibility = sourceJavaVersion
targetCompatibility = targetJavaVersion

// The directory where generated sources from JavaCC grammar
compileJavacc.outputDirectory = file(javaccGeneratedDir)


/*
 * From here onward, tasks are declared for this project.
 */

// task dependencies
classes.dependsOn('compileJavacc')
projectReport.dependsOn('jacocoTestReport')

// The below directory will be deleted after perform clean task.
clean << {
    file(javaccGeneratedDir).deleteDir()
}

// Jar task requires all files in "src/main/java" directory.
task sourceJar(type: Jar) {
    classifier  = 'source'
    version     = project.version
    
    from        sourceSets.main.allJava
}

// Jar task for javadoc requires all javadoc
task javadocJar(type: Jar, dependsOn: javadoc) { 
    classifier  = 'javadoc' 
    version     = project.version
    
    from        javadoc.destinationDir 
}

// Configure encoding to all task options.
tasks.withType(AbstractCompile) each {
    it.options.encoding = defaultEncoding
}

// Enable HTML report for FindBugs.
tasks.withType(FindBugs) {
    
    reports {
        xml.enabled     = false
        html.enabled    = true
    }
    
}

// Set version of Gradle Wrapper to '2.1'
task wrapper(type: Wrapper) {
    gradleVersion = gradleWrapperVersion
}


/*
 * Configures the build script classpath for this project.
 */
buildscript {
    
    ext {
        javaccPluginVersion = '2.0.1'
    }
    
    // repositories used by build script.
    repositories {
        mavenCentral()
    }
    
    // dependent libraries
    dependencies {
        
        // See also https://github.com/johnmartel/javaccPlugin
        classpath group: 'ca.coglinc', name: 'javacc-gradle-plugin', version: javaccPluginVersion
        
    }
    
}


/*
 * In this section you declare where to find the dependencies of your project
 */
repositories {
    
    // User maven central repository.
    mavenCentral()
    
}


/*
 * In this section you declare the dependencies for your production and test code
 */
dependencies {
    
    // compile goals
    compile     group: 'org.slf4j',     name: 'slf4j-api',      version: slf4jVersion
    compile     group: 'org.slf4j',     name: 'slf4j-simple',   version: slf4jVersion
    
    // testCompile goals
    testCompile group: 'junit',         name: 'junit',          version: junitVersion
    
}


/*
 * In this section you declare archive task lists.
 */
artifacts {
    
    archives sourceJar
    archives javadocJar
    
}


/*
 * In this section you declare the source directories for your production and test code.
 * You can use this block to apply "java" plugin.
 */
sourceSets {
    
    // "src/main" directory settings
    main {
        
        output.classesDir   = targetMain
        output.resourcesDir = targetMain
        
        // "src/main/java" directory
        java {
            
            srcDir "src/main/javacc"
            srcDir compileJavacc.outputDirectory
            
        }
        
    }
    
    // "src/test" directory settings
    test {
        
        output.classesDir   = targetTest
        output.resourcesDir = targetTest
        
    }
    
}


/*
 * In this section you declare settings for the eclipse classpath and project.
 * You can use this block to apply "eclipse" plugin.
 */
eclipse {
    
    // eclipse project name
    project {
        name = 'vb6-parser'
    }
    
    // for eclipse .classpath file
    classpath {
        
        // The default output directory where Eclipse puts compiled classes.
        // It is same as maven target directory.
        defaultOutputDir = file(targetMain)
        
        file {
            
            // Adds a closure to be called after content is loaded from existing file,
            // but before gradle build information is merged.
            beforeMerged { classpath ->
                def existGeneratedDir = classpath.entries.find {
                    it.kind == 'src' && it.path.contains(javaccGeneratedDir)
                }
                
                if (existGeneratedDir == null) {
                    file(javaccGeneratedDir).mkdir()
                }
            }
            
            // Adds a closure to be called after content is loaded from existing file,
            // and after gradle build information is merged
            whenMerged { classpath ->
                classpath.entries.findAll { 
                    it.kind == "src" && it.path =~ /^src\/test/ 
                }*.output = targetTest
                
                classpath.entries.removeAll {
                    it.kind == 'lib'
                }
            }
            
            // Adds a closure to be called when the file has been created.
            withXml { xml ->
                def node = xml.asNode()
                
                node.find {
                    it.@kind == 'src' && it.@path.contains('generated')
                }
                .appendNode('attributes')
                .appendNode('attribute', [
                    name:   'ignore_optional_problems',
                    value:  'true'
                ])
                
                node.appendNode('classpathentry', [
                    exported:   'true',
                    kind:       'con',
                    path:       'org.springsource.ide.eclipse.gradle.classpathcontainer'
                ])
            }
            
        }
        
    }
    
}


/*
 * In this section you declare settings for checkstyle plugin.
 * You can use this block to apply "checkstyle" plugin.
 */
/*checkstyle {
    configFile = file("${project.projectDir}/config/checkstyle/checks.xml")
}*/


/*
 * In this section you declare settings for findbugs plugin.
 * You can use this block to apply "findbugs" plugin.
 */
findbugs {
    
    sourceSets      = [sourceSets.main]
    
    ignoreFailures  = true
    effort          = "max"
    reportLevel     = "high"
    
    reportsDir       = file("${project.buildDir}/reports/findbugs")
    //excludeFilter   = file("${project.projectDir}/config/findbugs/exclude.xml")
    
}


/*
 * In this section you declare settings for jacoco plugin.
 * You can use this block to apply "jacoco" plugin.
 */
jacocoTestReport {
    
    reports {
        xml.enabled     true
        html.enabled    true
        csv.enabled     false
    }
    
}


/*
 * In this section you declare settings for PMD plugin.
 * You can use this block to apply "pmd" plugin.
 */
pmd {
    
    sourceSets      = [sourceSets.main]
    
    ignoreFailures  = true
    reportsDir      = file("${project.buildDir}/reports/pmd")
    
    /*ruleSets        = [
        "basic",
        "braces"
    ]*/
}


/*
 * In this section you declare properties in jar file.
 */
jar {
    
    manifest {
        attributes 'Implementation-Title': 'javacc-gradle-plugin', 'Implementation-Version': version
    }
    
}


/*
 * In this section declare properties that is used distribution file name.
 * You can use this block to apply "application" plugin.
 */
distZip {

    appendix    = 'sample'
    version     = project.version
    classifier  = 'bin'

}


/*
 * In this section declare you would like to perform Java application.
 * You can use this block to apply "application" plugin.
 */
run {
    
    main = "${project.group}.Sample"
    args = ["1 + 2 * (3 + 4) + (5 + 6 * 7 + 8) / 5;"]

}


/*
 * In this section declare properties you would like to set jar file.
 * You can use this block to apply "application" plugin.
 */
startScripts {

    applicationName = "JAXC - test"
    mainClassName   = "${project.group}.Sample"

}
